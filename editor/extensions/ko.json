{
    "coconut.category.coconutS": "코코넛-S",
    "coconut.moveMotor": "[DIRECTION_FB] 움직이기",
    "coconut.stopMotor": "모터 정지",
    "coconut.turnMotor": "[DIRECTION_LR] 으로 돌기",
    "coconut.dirMenu.forward": "앞으로",
    "coconut.dirMenu.backward": "뒤로",
    "coconut.dirMenu.left": "왼쪽",
    "coconut.dirMenu.right": "오른쪽",
    "coconut.dirMenu.both": "모든",
    "coconut.moveGoTime": "[DIRECTION_FB] [TIME_SEC] 초 동안 움직이기",
    "coconut.turnMotorTime": "[DIRECTION_LR] 으로 [TIME_SEC] 초 동안 돌기",
    "coconut.moveMotorColor": "[DIRECTION_LR] 으로 회전하는 동안 [LED_COLOR] RGB 켜기",
    "coconut.colorMenu.red": "빨간색",
    "coconut.colorMenu.green": "초록색",
    "coconut.colorMenu.blue": "파란색",
    "coconut.colorMenu.yellow": "노란색",
    "coconut.colorMenu.cyan": "하늘색",
    "coconut.colorMenu.magenta": "보라색",
    "coconut.colorMenu.white": "흰색",
    "coconut.moveGoCm": "[DIRECTION_FB] [N_CM] cm 이동하기",
    "coconut.turnMotorDegree": "[DIRECTION_LR] 으로 [DEGREE] 도 돌기",
    "coconut.rgbOn": "[DIRECTION_LRB] RGB [LED_COLOR] 으로 켜기",
    "coconut.rgbOff": "[DIRECTION_LRB] RGB 끄기",
    "coconut.rgbOffColor": "[DIRECTION_LRB] RGB [LED_COLOR] 끄기",
    "coconut.rgbOnTime": "[DIRECTION_LRB] RGB [LED_COLOR] 으로 [TIME_SEC] 초 동안 켜기",
    "coconut.beep": "버저 켜기",
    "coconut.playBuzzerTime": "버저음을 [TIME_SEC] 초 동안 소리내기",
    "coconut.playBuzzerFreq": "버저음 [N_FREQUENCY] Hz 를 [TIME_SEC] 초 동안 소리내기",
    "coconut.buzzerOff": "버저 끄기",
    "coconut.playNote": "[NOTE] [OCTAVE] [SHARP] 음을 [BEAT] 박자로 연주하기",
    "coconut.restBeat": "[BEAT_REST] 동안 쉬기",
    "coconut.playNoteColor": "[NOTE] [OCTAVE] [SHARP] 음을 [BEAT] 박자로 연주하는 동안 [DIRECTION_LRB] RGB [LED_COLOR] 켜기",
    "coconut.changeBeat": "연주속도를 [BEAT_CHANGE] 박자로 바꾸기",
    "coconut.noteMenu.c" : "도",
    "coconut.noteMenu.d" : "레",
    "coconut.noteMenu.e" : "미",
    "coconut.noteMenu.f" : "파",
    "coconut.noteMenu.g" : "솔",
    "coconut.noteMenu.a" : "라",
    "coconut.noteMenu.b" : "시",
    "coconut.sharpMenu.none": "-",
    "coconut.sharpMenu.sharp": "#",
    "coconut.sharpMenu.flat": "b",
    "coconut.beatMenu.half": "2분음표",
    "coconut.beatMenu.quarter": "4분음표",
    "coconut.beatMenu.8th": "8분음표",
    "coconut.beatMenu.16th": "16분음표",
    "coconut.beatMenu.32nd": "32분음표",
    "coconut.beatMenu.whole": "온음표",
    "coconut.beatMenu.dot_half": "점2분음표",
    "coconut.beatMenu.dot_quarter": "점4분음표",
    "coconut.beatMenu.dot_8th": "점8분음표",
    "coconut.beatMenu.dot_16th": "점16분음표",
    "coconut.beatMenu.dot_32nd": "점32분음표",
    "coconut.beatMenu.original": "원래",
    "coconut.beatRestMenu.half": "2분쉼표",
    "coconut.beatRestMenu.quarter": "4분쉼표",
    "coconut.beatRestMenu.8th": "8분쉼표",
    "coconut.beatRestMenu.16th": "16분쉼표",
    "coconut.beatRestMenu.whole": "온쉼표",
    "coconut.getLineTracer": "[DIRECTION_LR] 바닥센서",
    "coconut.isLineDetected": "[DIRECTION_LRB] 바닥센서 [DETECT]",
    "coconut.getLineTracersDetect": "바닥센서 감지",
    "coconut.lineTracerCmd": "검은색 선을 만날 때까지 [COMMAND]",
    "coconut.detectMenu.yes": "감지",
    "coconut.detectMenu.no": "미감지",
    "coconut.commandMenu.turnLeft": "왼쪽으로 돌기",
    "coconut.commandMenu.turnRight": "오른쪽으로 돌기",
    "coconut.getDistance": "[DIRECTION_LR] 전방센서",
    "coconut.isDetectObstacle": "[DIRECTION_LRB] 전방센서 [DETECT]",
    "coconut.isDetectObstacles": "장애물 감지",
    "coconut.ledMatrixOn": "도트매트릭스 [ON_OFF] ( [ROW] 줄, [COL] 칸)",
    "coconut.ledMatrixOnAll": "도트매트릭스 모두 켜기",
    "coconut.ledMatrixClear": "도트매트릭스 모두 끄기",
    "coconut.showLedMatrixNumber": "도트매트릭스 숫자 [NUMBER] 표시",
    "coconut.showLedMatrixSmall": "도트매트릭스 소문자 [SMALL_LETTER] 표시",
    "coconut.showLedMatrixCapital": "도트매트릭스 대문자 [CAPITAL_LETTER] 표시",
    "coconut.showLedMatrixKorean": "도트매트릭스 한글 [KR_LETTER] 표시",
    "coconut.onMenu.on": "켜짐",
    "coconut.onMenu.off": "꺼짐",
    "coconut.krLetterMenu.ga": "가",
    "coconut.krLetterMenu.na": "나",
    "coconut.krLetterMenu.da": "다",
    "coconut.krLetterMenu.la": "라",
    "coconut.krLetterMenu.ma": "마",
    "coconut.krLetterMenu.ba": "바",
    "coconut.krLetterMenu.sa": "사",
    "coconut.krLetterMenu.aa": "아",
    "coconut.krLetterMenu.ja": "자",
    "coconut.krLetterMenu.cha": "차",
    "coconut.krLetterMenu.ka": "카",
    "coconut.krLetterMenu.ta": "타",
    "coconut.krLetterMenu.pa": "파",
    "coconut.krLetterMenu.ha": "하",
    "coconut.getLightSensor": "밝기",
    "coconut.getTemperature": "온도",
    "coconut.getAccelerometer": "[ACC_AXIS] 가속도",
    "coconut.axisMenu.x": "X축",
    "coconut.axisMenu.y": "Y축",
    "coconut.axisMenu.z": "Z축",
    "coconut.category.hidden": "Hidden",
    "coconut.hidden.playMelody": "[MELODY] 연주하기",
    "coconut.melodyMenu.twinkle": "반짝반짝 작은별",
    "coconut.melodyMenu.bears": "곰 세마리",
    "coconut.melodyMenu.lullaby": "모차르트 자장가",
    "coconut.melodyMenu.doremi": "도레미송",
    "coconut.melodyMenu.butterfly": "나비야",
    "coconut.hidden.followLine": "선 따라가기",
    "coconut.hidden.avoidMode": "어보이드 모드",
    "coconut.hidden.showCharacterDraw": "도트매트릭스 문자 그리기 [MATRIX]",
    "coconut.category.sensor": "센서",
    "coconut.sensor.moveExtMotors": "외부모터 [DIRECTION_EXT] (으로) 움직이기 속도 [MOTOR_SPEED]",
    "coconut.sensor.moveExtMotorSingle": "[DIRECTION_LR] 외부모터 속도 [EXT_MOTOR_SPEED] 으로 움직이기",
    "coconut.sensor.runExtServo": "서보모터 연결 [PINS] 각도 [SERVO_ANGLE]",
    "coconut.sensor.extLedOn": "외부 LED 설정 [PINS] [TIME_SEC] 초 동안 켜기",
    "coconut.sensor.extSpeakerOn": "외부 스피커 설정 [PWM_PIN] [N_FREQUENCY] Hz로 [TIME_SEC] 초 동안 소리내기",
    "coconut.sensor.extSpeakerOff": "외부 스피커 [PWM_PIN] 끄기",
    "coconut.sensor.getTouchSensor": "터치센서 [PINS]",
    "coconut.sensor.getTouchPressed": "터치센서 [PINS] 누름",
    "coconut.sensor.getMikeSensor": "마이크센서 [ANALOG_PIN]",
    "coconut.sensor.getExtIR": "외부 적외선센서 [ANALOG_PIN]",
    "coconut.sensor.getExtCds": "외부 빛센서 [ANALOG_PIN]",
    "arduinoEsp32.InterrupModeMenu.changeEdge": "change edge",
    "arduinoEsp32.InterrupModeMenu.fallingEdge": "falling edge",
    "arduinoEsp32.InterrupModeMenu.high": "high",
    "arduinoEsp32.InterrupModeMenu.low": "low",
    "arduinoEsp32.InterrupModeMenu.risingEdge": "rising edge",
    "arduinoEsp32.category.data": "Data",
    "arduinoEsp32.category.sensor": "Sensor",
    "arduinoEsp32.category.serial": "Serial",
    "arduinoEsp32.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduinoEsp32.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduinoEsp32.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduinoEsp32.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduinoEsp32.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduinoEsp32.dataTypeMenu.decimal": "decimal",
    "arduinoEsp32.dataTypeMenu.string": "string",
    "arduinoEsp32.dataTypeMenu.wholeNumber": "whole number",
    "arduinoEsp32.eolMenu.noWarp": "no-warp",
    "arduinoEsp32.eolMenu.warp": "warp",
    "arduinoEsp32.levelMenu.high": "high",
    "arduinoEsp32.levelMenu.low": "low",
    "arduinoEsp32.modeMenu.input": "input",
    "arduinoEsp32.modeMenu.inputPullup": "input-pullup",
    "arduinoEsp32.modeMenu.output": "output",
    "arduinoEsp32.pins.attachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoEsp32.pins.detachInterrupt": "detach interrupt pin [PIN]",
    "arduinoEsp32.pins.esp32ReadTouchPin": "read touch pin [PIN]",
    "arduinoEsp32.pins.readAnalogPin": "read analog pin [PIN]",
    "arduinoEsp32.pins.readDigitalPin": "read digital pin [PIN]",
    "arduinoEsp32.pins.setServoOutput": "set servo pin [PIN] use channel [CH] out [OUT]",
    "arduinoEsp32.sensor.readHallSensor": "read hall sensor",
    "arduinoEsp32.sensor.runningTime": "running time (millis)",
    "arduinoEsp32.serial.multiSerialAvailable": "serial [NO] available data length",
    "arduinoEsp32.serial.multiSerialBegin": "serial [NO] begin baudrate [VALUE]",
    "arduinoEsp32.serial.multiSerialPrint": "serial [NO] print [VALUE] [EOL]",
    "arduinoEsp32.serial.multiSerialReadAByte": "serial [NO] read a byte",
    "arduinoLeonardo.category.data": "Data",
    "arduinoLeonardo.category.pins": "Pins",
    "arduinoLeonardo.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduinoLeonardo.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduinoLeonardo.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduinoLeonardo.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduinoLeonardo.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduinoLeonardo.dataTypeMenu.decimal": "decimal",
    "arduinoLeonardo.dataTypeMenu.string": "string",
    "arduinoLeonardo.dataTypeMenu.wholeNumber": "whole number",
    "arduinoLeonardo.levelMenu.high": "high",
    "arduinoLeonardo.levelMenu.low": "low",
    "arduinoLeonardo.modeMenu.input": "input",
    "arduinoLeonardo.modeMenu.inputPullup": "input-pullup",
    "arduinoLeonardo.modeMenu.output": "output",
    "arduinoLeonardo.pins.attachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoLeonardo.pins.detachInterrupt": "detach interrupt pin [PIN]",
    "arduinoLeonardo.pins.readAnalogPin": "read analog pin [PIN]",
    "arduinoLeonardo.pins.readDigitalPin": "read digital pin [PIN]",
    "arduinoLeonardo.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "arduinoLeonardo.pins.setPinMode": "set pin [PIN] mode [MODE]",
    "arduinoLeonardo.pins.setPwmOutput": "set pwm pin [PIN] out [OUT]",
    "arduinoLeonardo.pins.setServoOutput": "set servo pin [PIN] out [OUT]",
    "arduinoMega2560.category.data": "Data",
    "arduinoMega2560.category.pins": "Pins",
    "arduinoMega2560.category.serial": "Serial",
    "arduinoMega2560.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduinoMega2560.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduinoMega2560.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduinoMega2560.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduinoMega2560.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduinoMega2560.dataTypeMenu.decimal": "decimal",
    "arduinoMega2560.dataTypeMenu.string": "string",
    "arduinoMega2560.dataTypeMenu.wholeNumber": "whole number",
    "arduinoMega2560.levelMenu.high": "high",
    "arduinoMega2560.levelMenu.low": "low",
    "arduinoMega2560.modeMenu.input": "input",
    "arduinoMega2560.modeMenu.inputPullup": "input-pullup",
    "arduinoMega2560.modeMenu.output": "output",
    "arduinoMega2560.pins.attachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduinoMega2560.pins.detachInterrupt": "detach interrupt pin [PIN]",
    "arduinoMega2560.pins.readAnalogPin": "read analog pin [PIN]",
    "arduinoMega2560.pins.readDigitalPin": "read digital pin [PIN]",
    "arduinoMega2560.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "arduinoMega2560.pins.setPinMode": "set pin [PIN] mode [MODE]",
    "arduinoMega2560.pins.setPwmOutput": "set pwm pin [PIN] out [OUT]",
    "arduinoMega2560.pins.setServoOutput": "set servo pin [PIN] out [OUT]",
    "arduinoMega2560.serial.multiSerialAvailable": "serial [NO] available data length",
    "arduinoMega2560.serial.multiSerialBegin": "serial [NO] begin baudrate [VALUE]",
    "arduinoMega2560.serial.multiSerialPrint": "serial [NO] print [VALUE] [EOL]",
    "arduinoMega2560.serial.multiSerialReadAByte": "serial [NO] read a byte",
    "arduinoPeripheral.connection.connectFirmataTimeout": "Timeout when try to connect firmata, please download the firmware first",
    "arduino.InterrupModeMenu.changeEdge": "change edge",
    "arduino.InterrupModeMenu.fallingEdge": "falling edge",
    "arduino.InterrupModeMenu.low": "low",
    "arduino.InterrupModeMenu.risingEdge": "rising edge",
    "arduino.category.data": "Data",
    "arduino.category.pins": "Pins",
    "arduino.category.serial": "Serial",
    "arduino.data.dataConstrain": "constrain [DATA] between ([ARG0], [ARG1])",
    "arduino.data.dataConvert": "convert [DATA] to [TYPE]",
    "arduino.data.dataConvertASCIICharacter": "convert [DATA] to ASCII character",
    "arduino.data.dataConvertASCIINumber": "convert [DATA] to ASCII nubmer",
    "arduino.data.dataMap": "map [DATA] from ([ARG0], [ARG1]) to ([ARG2], [ARG3])",
    "arduino.dataTypeMenu.decimal": "decimal",
    "arduino.dataTypeMenu.string": "string",
    "arduino.dataTypeMenu.wholeNumber": "whole number",
    "arduino.eolMenu.noWarp": "no-warp",
    "arduino.eolMenu.warp": "warp",
    "arduino.levelMenu.high": "high",
    "arduino.levelMenu.low": "low",
    "arduino.modeMenu.input": "input",
    "arduino.modeMenu.inputPullup": "input-pullup",
    "arduino.modeMenu.output": "output",
    "arduino.pins.attachInterrupt": "attach interrupt pin [PIN] mode [MODE] executes",
    "arduino.pins.detachInterrupt": "detach interrupt pin [PIN]",
    "arduino.pins.readAnalogPin": "read analog pin [PIN]",
    "arduino.pins.readDigitalPin": "read digital pin [PIN]",
    "arduino.pins.setDigitalOutput": "set digital pin [PIN] out [LEVEL]",
    "arduino.pins.setPinMode": "set pin [PIN] mode [MODE]",
    "arduino.pins.setPwmOutput": "set pwm pin [PIN] out [OUT]",
    "arduino.pins.setServoOutput": "set servo pin [PIN] out [OUT]",
    "arduino.serial.serialAvailable": "serial available data length",
    "arduino.serial.serialBegin": "serial begin baudrate [VALUE]",
    "arduino.serial.serialPrint": "serial print [VALUE] [EOL]",
    "arduino.serial.serialReadData": "serial read data",
    "boost.color.any": "any color",
    "boost.color.black": "black",
    "boost.color.blue": "blue",
    "boost.color.green": "green",
    "boost.color.red": "red",
    "boost.color.white": "white",
    "boost.color.yellow": "yellow",
    "boost.getMotorPosition": "motor [MOTOR_REPORTER_ID] position",
    "boost.getTiltAngle": "tilt angle [TILT_DIRECTION]",
    "boost.motorDirection.backward": "that way",
    "boost.motorDirection.forward": "this way",
    "boost.motorDirection.reverse": "reverse",
    "boost.motorOff": "turn motor [MOTOR_ID] off",
    "boost.motorOn": "turn motor [MOTOR_ID] on",
    "boost.motorOnFor": "turn motor [MOTOR_ID] for [DURATION] seconds",
    "boost.motorOnForRotation": "turn motor [MOTOR_ID] for [ROTATION] rotations",
    "boost.seeingColor": "seeing [COLOR] brick?",
    "boost.setLightHue": "set light color to [HUE]",
    "boost.setMotorDirection": "set motor [MOTOR_ID] direction [MOTOR_DIRECTION]",
    "boost.setMotorPower": "set motor [MOTOR_ID] speed to [POWER] %",
    "boost.tiltDirection.any": "any",
    "boost.tiltDirection.down": "down",
    "boost.tiltDirection.left": "left",
    "boost.tiltDirection.right": "right",
    "boost.tiltDirection.up": "up",
    "boost.whenColor": "when [COLOR] brick seen",
    "boost.whenTilted": "when tilted [TILT_DIRECTION_ANY]",
    "ev3.beepNote": "[TIME] 초 동안 [NOTE] 번 음 울리기",
    "ev3.buttonPressed": " [PORT] 번 버튼이 눌러졌는가?",
    "ev3.getBrightness": "밝기",
    "ev3.getDistance": "거리",
    "ev3.getMotorPosition": "모터 [PORT] 위치",
    "ev3.motorSetPower": "[PORT] 모터 강도를 [POWER] %로 정하기",
    "ev3.motorTurnClockwise": "[PORT] 모터를 [TIME] 초 동안 이쪽으로 돌리기",
    "ev3.motorTurnCounterClockwise": "[PORT] 모터를 [TIME] 초 동안 저쪽으로 돌리기",
    "ev3.whenBrightnessLessThan": "밝기 <  [DISTANCE]일 때",
    "ev3.whenButtonPressed": "[PORT] 번 버튼이 눌러졌을 때",
    "ev3.whenDistanceLessThan": "거리 < [DISTANCE]일 때",
    "gdxfor.getAcceleration": "acceleration [DIRECTION]",
    "gdxfor.getForce": "force",
    "gdxfor.getSpin": "spin speed [DIRECTION]",
    "gdxfor.getTilt": "tilt angle [TILT]",
    "gdxfor.isFreeFalling": "falling?",
    "gdxfor.isTilted": "tilted [TILT]?",
    "gdxfor.pulled": "pulled",
    "gdxfor.pushed": "pushed",
    "gdxfor.shaken": "shaken",
    "gdxfor.startedFalling": "started falling",
    "gdxfor.tiltDirectionMenu.any": "any",
    "gdxfor.tiltDirectionMenu.back": "back",
    "gdxfor.tiltDirectionMenu.front": "front",
    "gdxfor.tiltDirectionMenu.left": "left",
    "gdxfor.tiltDirectionMenu.right": "right",
    "gdxfor.turnedFaceDown": "turned face down",
    "gdxfor.turnedFaceUp": "turned face up",
    "gdxfor.whenForcePushedOrPulled": "when force sensor [PUSH_PULL]",
    "gdxfor.whenGesture": "when [GESTURE]",
    "gdxfor.whenTilted": "when tilted [TILT]",
    "makeymakey.downArrow": "down arrow",
    "makeymakey.downArrowShort": "아래쪽",
    "makeymakey.leftArrow": "left arrow",
    "makeymakey.leftArrowShort": "왼쪽",
    "makeymakey.rightArrow": "right arrow",
    "makeymakey.rightArrowShort": "오른쪽",
    "makeymakey.spaceKey": "스페이스",
    "makeymakey.upArrow": "up arrow",
    "makeymakey.upArrowShort": "위쪽",
    "makeymakey.whenKeyPressed": "when [KEY] key pressed",
    "makeymakey.whenKeysPressedInOrder": "when [SEQUENCE] pressed in order",
    "microbit.buttonsMenu.any": "아무",
    "microbit.clearDisplay": "화면 지우기",
    "microbit.defaultTextToDisplay": "Hello!",
    "microbit.displaySymbol": "[MATRIX] 보여주기",
    "microbit.displayText": "글자 [TEXT] 보여주기",
    "microbit.gesturesMenu.jumped": "점프하였을",
    "microbit.gesturesMenu.moved": "움직일",
    "microbit.gesturesMenu.shaken": "흔들어졌을",
    "microbit.isButtonPressed": "[BTN] 버튼이 눌려졌는가?",
    "microbit.isTilted": "[DIRECTION] 방향으로 기울어졌는가?",
    "microbit.pinStateMenu.off": "끄기",
    "microbit.pinStateMenu.on": "켜기",
    "microbit.tiltAngle": "[DIRECTION] 방향으로 기울어진 각도",
    "microbit.tiltDirectionMenu.any": "아무",
    "microbit.tiltDirectionMenu.back": "뒤쪽",
    "microbit.tiltDirectionMenu.front": "앞쪽",
    "microbit.tiltDirectionMenu.left": "왼쪽",
    "microbit.tiltDirectionMenu.right": "오른쪽",
    "microbit.whenButtonPressed": "[BTN] 버튼이 눌러졌을 때",
    "microbit.whenGesture": "[GESTURE] 때",
    "microbit.whenPinConnected": "[PIN]번 핀이 연결되었을 때",
    "microbit.whenTilted": "[DIRECTION] 방향으로 기울어졌을 때",
    "music.categoryName": "음악",
    "music.changeTempo": "빠르기를 [TEMPO] 만큼 바꾸기",
    "music.drumBass": "(2) 베이스 드럼",
    "music.drumBongo": "(13) 봉고",
    "music.drumCabasa": "(15) 카바사",
    "music.drumClaves": "(9) 클라베",
    "music.drumClosedHiHat": "(6) 닫힌 하이햇",
    "music.drumConga": "(14) 콩가",
    "music.drumCowbell": "(11) 카우벨 ",
    "music.drumCrashCymbal": "(4) 크래시 심벌",
    "music.drumCuica": "(18) 쿠이카 ",
    "music.drumGuiro": "(16) 귀로 ",
    "music.drumHandClap": "(8) 박수",
    "music.drumOpenHiHat": "(5) 열린 하이햇",
    "music.drumSideStick": "(3) 사이드 스틱",
    "music.drumSnare": "(1) 스네어 드럼 ",
    "music.drumTambourine": "(7) 탬버린",
    "music.drumTriangle": "(12) 트라이앵글 ",
    "music.drumVibraslap": "(17) 비브라슬랩 ",
    "music.drumWoodBlock": "(10) 나무 블록",
    "music.getTempo": "빠르기",
    "music.instrumentBass": "(6) 베이스",
    "music.instrumentBassoon": "(14) 바순",
    "music.instrumentCello": "(8) 첼로 ",
    "music.instrumentChoir": "(15) 합창단 ",
    "music.instrumentClarinet": "(10) 클라리넷 ",
    "music.instrumentElectricGuitar": "(5) 전자 기타 ",
    "music.instrumentElectricPiano": "(2) 전자 피아노 ",
    "music.instrumentFlute": "(12) 플루트 ",
    "music.instrumentGuitar": "(4) 기타",
    "music.instrumentMarimba": "(19) 마림바 ",
    "music.instrumentMusicBox": "(17) 뮤직 박스",
    "music.instrumentOrgan": "(3) 오르간",
    "music.instrumentPiano": "(1) 피아노",
    "music.instrumentPizzicato": "(7) 피치카토 ",
    "music.instrumentSaxophone": "(11) 색소폰 ",
    "music.instrumentSteelDrum": "(18) 스틸 드럼 ",
    "music.instrumentSynthLead": "(20) 신드 리드",
    "music.instrumentSynthPad": "(21) 신드 패드 ",
    "music.instrumentTrombone": "(9) 트럼본",
    "music.instrumentVibraphone": "(16) 비브라폰",
    "music.instrumentWoodenFlute": "(13) 나무 플루트 ",
    "music.midiPlayDrumForBeats": "[DRUM]번 타악기를 [BEATS] 박자로 연주하기",
    "music.midiSetInstrument": "악기를 [INSTRUMENT](으)로 정하기",
    "music.playDrumForBeats": "[DRUM]번 타악기를 [BEATS] 박자로 연주하기",
    "music.playNoteForBeats": "[NOTE]번 음을 [BEATS] 박자로 연주하기",
    "music.restForBeats": "[BEATS] 박자 쉬기 ",
    "music.setInstrument": "악기를 [INSTRUMENT](으)로 정하기",
    "music.setTempo": "빠르기를 [TEMPO](으)로 정하기",
    "pen.categoryName": "펜",
    "pen.changeColorParam": "펜 [COLOR_PARAM]을(를) [VALUE]만큼 바꾸기",
    "pen.changeHue": "펜 색깔을 [HUE]만큼 바꾸기",
    "pen.changeShade": "펜 명암을 [SHADE] 만큼 바꾸기 ",
    "pen.changeSize": "펜 굵기를 [SIZE] 만큼 바꾸기",
    "pen.clear": "모두 지우기",
    "pen.colorMenu.brightness": "명도",
    "pen.colorMenu.color": "색깔",
    "pen.colorMenu.saturation": "채도 ",
    "pen.colorMenu.transparency": "투명도",
    "pen.penDown": "펜 내리기",
    "pen.penUp": "펜 올리기",
    "pen.setColor": "펜 색깔을 [COLOR](으)로 정하기 ",
    "pen.setColorParam": "펜 [COLOR_PARAM]을(를) [VALUE](으)로 정하기",
    "pen.setHue": "펜 색깔을 [HUE](으)로 정하기",
    "pen.setShade": "펜 명암을 [SHADE](으)로 정하기 ",
    "pen.setSize": "펜 굵기를 [SIZE](으)로 정하기",
    "pen.stamp": "도장찍기",
    "speech.defaultWhenIHearValue": "시작합시다",
    "speech.extensionName": "음성 인식",
    "speech.listenAndWait": "듣고 기다리기",
    "speech.speechReporter": "인식된 말",
    "speech.whenIHear": "[PHRASE] 이(가) 들릴 때",
    "text2speech.alto": "중고음",
    "text2speech.categoryName": "Text to Speech",
    "text2speech.defaultTextToSpeak": "안녕 ",
    "text2speech.giant": "저음",
    "text2speech.kitten": "고양이",
    "text2speech.setLanguageBlock": "언어를 [LANGUAGE]로 정하기",
    "text2speech.setVoiceBlock": "음성을 [VOICE]로 정하기",
    "text2speech.speakAndWaitBlock": "[WORDS] 말하기",
    "text2speech.squeak": "고음",
    "text2speech.tenor": "중저음",
    "translate.categoryName": "번역",
    "translate.defaultTextToTranslate": "안녕 ",
    "translate.translateBlock": "[WORDS]을(를) [LANGUAGE]로 번역하기",
    "translate.viewerLanguage": "언어",
    "videoSensing.categoryName": "비디오 감지",
    "videoSensing.direction": "방향",
    "videoSensing.motion": "동작",
    "videoSensing.off": "끄기",
    "videoSensing.on": "켜기",
    "videoSensing.onFlipped": "뒤집힌 상태로 켜기",
    "videoSensing.setVideoTransparency": "비디오 투명도를 [TRANSPARENCY] (으)로 정하기",
    "videoSensing.sprite": "스프라이트",
    "videoSensing.stage": "무대 ",
    "videoSensing.videoOn": "비디오 [ATTRIBUTE]에 대한 [SUBJECT]에서의 관찰값",
    "videoSensing.videoToggle": "비디오 [VIDEO_STATE]",
    "videoSensing.whenMotionGreaterThan": "비디오 동작 > [REFERENCE]일 때 ",
    "wedo2.getDistance": "거리",
    "wedo2.getTiltAngle": "[TILT_DIRECTION] 방향으로 기울어진 각도",
    "wedo2.isTilted": "[TILT_DIRECTION_ANY] 방향으로 기울어졌는가?",
    "wedo2.motorDirection.backward": "저쪽",
    "wedo2.motorDirection.forward": "이쪽",
    "wedo2.motorDirection.reverse": "반대쪽",
    "wedo2.motorId.a": "모터 A",
    "wedo2.motorId.all": "모든 모터",
    "wedo2.motorId.b": "모터 B",
    "wedo2.motorId.default": "모터",
    "wedo2.motorOff": "[MOTOR_ID] 끄기",
    "wedo2.motorOn": "[MOTOR_ID] 켜기",
    "wedo2.motorOnFor": "[DURATION] 초 동안 [MOTOR_ID] 켜기",
    "wedo2.playNoteFor": "[NOTE] 번 음을 [DURATION]초 간 연주하기",
    "wedo2.setLightHue": "빛의 색을  [HUE]로 정하기",
    "wedo2.setMotorDirection": "[MOTOR_ID]의 방향을 [MOTOR_DIRECTION]으로 정하기",
    "wedo2.startMotorPower": "[MOTOR_ID] 모터 강도를 [POWER]로 정하기",
    "wedo2.tiltDirection.any": "아무",
    "wedo2.tiltDirection.down": "아래쪽",
    "wedo2.tiltDirection.left": "왼쪽",
    "wedo2.tiltDirection.right": "오른쪽",
    "wedo2.tiltDirection.up": "위쪽",
    "wedo2.whenDistance": "거리 [OP] [REFERENCE] 일 때",
    "wedo2.whenTilted": "[TILT_DIRECTION_ANY] 방향으로 기울일 때"
}
